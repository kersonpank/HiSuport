{"ast":null,"code":"import React,{useState,useEffect,useReducer,useContext,useCallback}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import api from\"../../services/api\";import{AuthContext}from\"../../context/Auth/AuthContext\";import Board from'react-trello';import{toast}from\"react-toastify\";import{i18n}from\"../../translate/i18n\";import{useHistory}from'react-router-dom';import{socketConnection}from\"../../services/socket\";/*\n\n\nCÓDIGO DESENVOLVIDO POR Jáder Oliveira\nPROÍBIDA A VENDA TOTAL OU PARCIAL DESTE CÓDIGO\nCONTATO: jaderoliveiraa@gmail.com\nTELEFONE: +55 51 9323-1592\n\n\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const useStyles=makeStyles(theme=>({root:{display:\"flex\",alignItems:\"center\",padding:theme.spacing(1)},button:{background:\"#10a110\",border:\"none\",padding:\"10px\",color:\"white\",fontWeight:\"bold\",borderRadius:\"5px\"}}));const Kanban=()=>{const classes=useStyles();const history=useHistory();const[tags,setTags]=useState([]);const[reloadData,setReloadData]=useState(false);const[isInitialLoadComplete,setIsInitialLoadComplete]=useState(false);const fetchTags=async()=>{try{const response=await api.get(\"/tags/kanban\");const fetchedTags=response.data.lista||[];//console.log(response);\nsetTags(fetchedTags);// Fetch tickets after fetching tags\nawait fetchTickets(jsonString);}catch(error){console.log(error);}};useEffect(()=>{fetchTags();},[]);const[file,setFile]=useState({lanes:[]});const[tickets,setTickets]=useState([]);const{user}=useContext(AuthContext);const{profile,queues}=user;const jsonString=user.queues.map(queue=>queue.UserQueue.queueId);const fetchTickets=async jsonString=>{try{const{data}=await api.get(\"/tickets/kanban\",{params:{queueIds:JSON.stringify(jsonString),teste:true}});setTickets(data.tickets);}catch(err){console.log(err);setTickets([]);}};/*\n  \n    const reloadKanbanData = useCallback(async () => {\n      await fetchTags();\n      await fetchTickets(jsonString);\n    }, [fetchTags, fetchTickets, jsonString]);\n  \n    useEffect(() => {\n      if (isInitialLoadComplete) {\n        reloadKanbanData();\n      } else {\n        setIsInitialLoadComplete(true);\n      }\n    }, [isInitialLoadComplete, reloadKanbanData]);\n  \n    useEffect(() => {\n      const companyId = localStorage.getItem(\"companyId\");\n      const socket = socketConnection({ companyId });\n  \n      socket.on(\"connect\", () => socket.emit(\"joinNotification\"));\n      socket.on(`company-${companyId}-contact`, (data) => {\n        if (data.action === \"updateUnread\") {\n          console.log(\"Received WebSocket data:\", data);\n          setReloadData(true);\n        }\n      });\n  \n      return () => {\n        socket.disconnect();\n      };\n    }, []);\n  \n    useEffect(() => {\n      if (reloadData && isInitialLoadComplete) {\n        reloadKanbanData();\n        setReloadData(false);\n      }\n    }, [reloadData, isInitialLoadComplete, reloadKanbanData]);\n  \n  \n  */const popularCards=jsonString=>{const filteredTickets=tickets.filter(ticket=>ticket.tags.length===0);//console.log(filteredTickets);\nconst lanes=[{id:\"lane0\",title:\"Em Aberto\",label:\"0\",cards:filteredTickets.map(ticket=>({id:ticket.id.toString(),label:\"Ticket nº \"+ticket.id.toString(),description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[ticket.contact.number,/*#__PURE__*/_jsx(\"br\",{}),ticket.lastMessage]}),/*#__PURE__*/_jsx(\"button\",{className:classes.button,onClick:()=>handleCardClick(ticket.uuid),children:\"Ver Ticket\"})]}),title:ticket.contact.name,draggable:true,href:\"/tickets/\"+ticket.uuid}))},...tags.map(tag=>{const filteredTickets=tickets.filter(ticket=>{const tagIds=ticket.tags.map(tag=>tag.id);return tagIds.includes(tag.id);});return{id:tag.id.toString(),title:tag.name,label:tag.id.toString(),cards:filteredTickets.map(ticket=>({id:ticket.id.toString(),label:\"Ticket nº \"+ticket.id.toString(),description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[ticket.contact.number,/*#__PURE__*/_jsx(\"br\",{}),ticket.lastMessage]}),/*#__PURE__*/_jsx(\"button\",{className:classes.button,onClick:()=>handleCardClick(ticket.uuid),children:\"Ver Ticket\"})]}),title:ticket.contact.name,draggable:true,href:\"/tickets/\"+ticket.uuid})),style:{backgroundColor:tag.color,color:\"white\"}};})];setFile({lanes});};const handleCardClick=uuid=>{//console.log(\"Clicked on card with UUID:\", uuid);\nhistory.push('/tickets/'+uuid);};useEffect(()=>{popularCards(jsonString);},[tags,tickets,reloadData]);const handleCardMove=async(cardId,sourceLaneId,targetLaneId)=>{try{await api.delete(\"/ticket-tags/\".concat(targetLaneId));await api.put(\"/ticket-tags/\".concat(targetLaneId,\"/\").concat(sourceLaneId));toast.success('Etiqueta do ticket adicionada com Sucesso!');}catch(err){console.log(err);}};return/*#__PURE__*/_jsx(\"div\",{className:classes.root,children:/*#__PURE__*/_jsx(Board,{data:file,onCardMoveAcrossLanes:handleCardMove,style:{backgroundColor:'rgba(252, 252, 252, 0.03)'}})});};export default Kanban;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}